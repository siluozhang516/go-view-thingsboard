import { HttpClient } from "../../angular-http";
import { Observable } from "rxjs";
import { LoginRequest, LoginResponse } from "../../shared/models/login.models";
import { RequestConfig } from "../http/http-utils";
import { UserService } from "../http/user.service";
import { UtilsService } from "../../core/services/utils.service";
import { LocalStorageService } from "../local-storage/local-storage.service";
import { TwoFactorAuthProviderType, TwoFaProviderInfo } from "../../shared/models/two-factor-auth.models";
import { UserPasswordPolicy } from "../../shared/models/settings.models";
export declare class AuthService {
    private http;
    private userService;
    private utils;
    constructor(http: HttpClient, userService: UserService, utils: UtilsService);
    twoFactorAuthProviders: Array<TwoFaProviderInfo>;
    private refreshTokenSubject;
    private jwtHelper;
    private authenticatedListeners;
    private isAuthenticated;
    static localStorage: LocalStorageService;
    private userInfo;
    private static _storeGet;
    private static isTokenValid;
    static isJwtTokenValid(): boolean;
    private static clearTokenData;
    static getJwtToken(): any;
    login(loginRequest: LoginRequest): Observable<LoginResponse>;
    checkTwoFaVerificationCode(providerType: TwoFactorAuthProviderType, verificationCode: number): Observable<LoginResponse>;
    publicLogin(publicId: string): Observable<LoginResponse>;
    sendResetPasswordLink(email: string): Observable<Object>;
    activate(activateToken: string, password: string, sendActivationMail: boolean): Observable<LoginResponse>;
    resetPassword(resetToken: string, password: string): Observable<LoginResponse>;
    changePassword(currentPassword: string, newPassword: string, config?: RequestConfig): Observable<any>;
    getUserPasswordPolicy(): Observable<UserPasswordPolicy>;
    activateByEmailCode(emailCode: string): Observable<LoginResponse>;
    resendEmailActivation(email: string): Observable<Object>;
    loginAsUser(userId: string): Observable<LoginResponse>;
    logout(): void;
    getAvailableTwoFaLoginProviders(): Observable<Array<TwoFaProviderInfo>>;
    private loadUser;
    private procceedJwtTokenValidate;
    refreshJwtToken(loadUserElseStoreJwtToken?: boolean): Observable<LoginResponse>;
    private notifyUnauthenticated;
    private notifyAuthenticated;
    private notifyAuthenticationChange;
    private listenAuthenticationChange;
    private validateJwtToken;
    refreshTokenPending(): boolean;
    setUserFromJwtToken(jwtToken: any, refreshToken: any, notify: any): Observable<boolean>;
    private updateAndValidateTokens;
    parsePublicId(): string;
    private updateAndValidateToken;
    private clearJwtToken;
}
