import { RequestConfig } from './http-utils';
import { Observable } from 'rxjs';
import { HttpClient } from '../../angular-http';
import { PageLink } from '../../shared/models/page/page-link';
import { PageData } from '../../shared/models/page/page-data';
import { WidgetsBundle } from '../../shared/models/widgets-bundle.model';
import { DeprecatedFilter, WidgetType, widgetType, WidgetTypeDetails, WidgetTypeInfo } from '../../shared/models/widget.models';
import { TranslateService } from '../../inversify/interface';
export declare class WidgetService {
    private http;
    private translate;
    private allWidgetsBundles;
    private systemWidgetsBundles;
    private tenantWidgetsBundles;
    private widgetsInfoInMemoryCache;
    private loadWidgetsBundleCacheSubject;
    constructor(http: HttpClient, translate: TranslateService);
    getWidgetScopeVariables(): string[];
    getAllWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getSystemWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getTenantWidgetsBundles(config?: RequestConfig): Observable<Array<WidgetsBundle>>;
    getWidgetBundles(pageLink: PageLink, fullSearch?: boolean, tenantOnly?: boolean, config?: RequestConfig): Observable<PageData<WidgetsBundle>>;
    getWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<WidgetsBundle>;
    exportWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<WidgetsBundle>;
    saveWidgetsBundle(widgetsBundle: WidgetsBundle, config?: RequestConfig): Observable<WidgetsBundle>;
    updateWidgetsBundleWidgetTypes(widgetsBundleId: string, widgetTypeIds: Array<string>, config?: RequestConfig): Observable<void>;
    updateWidgetsBundleWidgetFqns(widgetsBundleId: string, widgetTypeFqns: Array<string>, config?: RequestConfig): Observable<void>;
    deleteWidgetsBundle(widgetsBundleId: string, config?: RequestConfig): Observable<Object>;
    getBundleWidgetTypes(widgetsBundleId: string, config?: RequestConfig): Observable<Array<WidgetType>>;
    exportBundleWidgetTypesDetails(widgetsBundleId: string, config?: RequestConfig): Observable<Array<WidgetTypeDetails>>;
    getBundleWidgetTypeFqns(widgetsBundleId: string, config?: RequestConfig): Observable<Array<string>>;
    getBundleWidgetTypeInfosList(widgetsBundleId: string, config?: RequestConfig): Observable<Array<WidgetTypeInfo>>;
    getBundleWidgetTypeInfos(pageLink: PageLink, widgetsBundleId: string, fullSearch?: boolean, deprecatedFilter?: DeprecatedFilter, widgetTypes?: Array<widgetType>, config?: RequestConfig): Observable<PageData<WidgetTypeInfo>>;
    getWidgetType(fullFqn: string, config?: RequestConfig): Observable<WidgetType>;
    saveImportedWidgetTypeDetails(widgetTypeDetails: WidgetTypeDetails, config?: RequestConfig): Observable<WidgetTypeDetails>;
    getWidgetTypeById(widgetTypeId: string, config?: RequestConfig): Observable<WidgetTypeDetails>;
    exportWidgetType(widgetTypeId: string, config?: RequestConfig): Observable<WidgetTypeDetails>;
    getWidgetTypeInfoById(widgetTypeId: string, config?: RequestConfig): Observable<WidgetTypeInfo>;
    saveWidgetType(widgetTypeDetails: WidgetTypeDetails, config?: RequestConfig): Observable<WidgetTypeDetails>;
    deleteWidgetType(widgetTypeId: string, config?: RequestConfig): Observable<Object>;
    getWidgetTypes(pageLink: PageLink, tenantOnly?: boolean, fullSearch?: boolean, deprecatedFilter?: DeprecatedFilter, widgetTypes?: Array<widgetType>, config?: RequestConfig): Observable<PageData<WidgetTypeInfo>>;
    addWidgetFqnToWidgetBundle(widgetsBundleId: string, fqn: string, config?: RequestConfig): Observable<void>;
    getWidgetTemplate(widgetTypeParam: widgetType, config?: RequestConfig): Observable<any>;
    getWidgetInfoFromCache(fullFqn: string): any | undefined;
    putWidgetInfoToCache(widgetInfo: any): void;
    private widgetTypeUpdated;
    deleteWidgetInfoFromCache(fullFqn: string): void;
    private loadWidgetsBundleCache;
    private invalidateWidgetsBundleCache;
}
